#!/usr/bin/env python3
"""
G√©n√©rateur de rapport PDF professionnel pour Neskao Trade Desk
Extrait toutes les donn√©es de la WebApp et g√©n√®re un rapport PDF complet
avec design professionnel inspir√© des standards MEREYA
"""

import json
import re
from datetime import datetime
from pathlib import Path
import sys

# Installation et import des d√©pendances
try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4, letter
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch, cm
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
    from reportlab.platypus.tableofcontents import TableOfContents
    from reportlab.lib.utils import ImageReader
except ImportError:
    print("‚ö†Ô∏è  Installation des modules requis...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "reportlab", "pillow"])
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4, letter
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch, cm
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY

class NeskaoDataExtractor:
    """Extracteur de donn√©es de la WebApp"""
    
    def __init__(self, webapp_dir):
        self.webapp_dir = Path(webapp_dir)
        self.sections_dir = self.webapp_dir / "src" / "components" / "sections"
        self.data = {}
        
    def extract_cities_data(self):
        """Extrait les donn√©es des 12 villes"""
        cities_data = [
            {
                "nom": "Paris", "flag": "üá´üá∑", "score": 8.09, "statut": "RECOMMAND√â",
                "ebitda_an1": 0.52, "equity_an1": 1.89, "roi_3ans": 171.6,
                "forces": "Liens CI, Convention fiscale, AFD/Proparco",
                "risques": "Perception n√©o-coloniale, co√ªts √©lev√©s"
            },
            {
                "nom": "Gen√®ve", "flag": "üá®üá≠", "score": 8.06, "statut": "RECOMMAND√â", 
                "ebitda_an1": -0.23, "equity_an1": 1.78, "roi_3ans": 187.5,
                "forces": "Hub DFI mondial, standards suisses",
                "risques": "Co√ªts prohibitifs, √©litisme"
            },
            {
                "nom": "Amsterdam", "flag": "üá≥üá±", "score": 7.98, "statut": "RECOMMAND√â",
                "ebitda_an1": 0.07, "equity_an1": 1.74, "roi_3ans": 176.8,
                "forces": "Port #1 cacao Europe, innovation ESG",
                "risques": "Barri√®re linguistique, distance culturelle"
            },
            {
                "nom": "Singapour", "flag": "üá∏üá¨", "score": 7.49, "statut": "POSSIBLE",
                "ebitda_an1": 0.02, "equity_an1": 1.61, "roi_3ans": 327.5,
                "forces": "ROI exceptionnel, hub Asie",
                "risques": "Distance prohibitive, impact social limit√©"
            },
            {
                "nom": "Hambourg", "flag": "üá©üá™", "score": 7.32, "statut": "POSSIBLE",
                "ebitda_an1": 0.09, "equity_an1": 1.85, "roi_3ans": 168.1,
                "forces": "Port expertise, rigueur allemande",
                "risques": "Distance culturelle, bureaucratie"
            },
            {
                "nom": "Londres", "flag": "üá¨üáß", "score": 7.06, "statut": "POSSIBLE",
                "ebitda_an1": -0.67, "equity_an1": 2.00, "roi_3ans": 151.2,
                "forces": "ICE Futures si√®ge, transparence",
                "risques": "Post-Brexit, co√ªts prohibitifs"
            },
            {
                "nom": "Chypre", "flag": "üá®üáæ", "score": 7.14, "statut": "POSSIBLE",
                "ebitda_an1": 0.40, "equity_an1": 2.38, "roi_3ans": 315.1,
                "forces": "Fiscalit√© 10%, transparence UE",
                "risques": "Proximit√© CI inexistante"
            },
            {
                "nom": "Maroc CFC", "flag": "üá≤üá¶", "score": 6.91, "statut": "POSSIBLE",
                "ebitda_an1": 0.93, "equity_an1": 5.67, "roi_3ans": 142.3,
                "forces": "Coop√©ration Sud-Sud, formation excellente",
                "risques": "Contr√¥le changes, acc√®s futures limit√©"
            },
            {
                "nom": "Maurice", "flag": "üá≤üá∫", "score": 6.56, "statut": "POSSIBLE",
                "ebitda_an1": 0.82, "equity_an1": 3.76, "roi_3ans": 138.7,
                "forces": "Solidarit√© africaine, hub r√©gional",
                "risques": "Image offshore, capital √©lev√©"
            },
            {
                "nom": "Tel Aviv", "flag": "üáÆüá±", "score": 6.58, "statut": "ENVISAGEABLE",
                "ebitda_an1": -0.06, "equity_an1": 2.17, "roi_3ans": 134.8,
                "forces": "Innovation agritech, excellence technique",
                "risques": "G√©opolitique sensible, distance CI"
            },
            {
                "nom": "Dubai", "flag": "üá¶üá™", "score": 6.50, "statut": "ENVISAGEABLE", 
                "ebitda_an1": 0.00, "equity_an1": 2.59, "roi_3ans": 156.2,
                "forces": "Zone franche, fiscalit√© 0%",
                "risques": "Impact social faible, acc√®s DFI limit√©"
            },
            {
                "nom": "Andorre", "flag": "üá¶üá©", "score": 5.23, "statut": "D√âCONSEILL√â",
                "ebitda_an1": 0.76, "equity_an1": 2.88, "roi_3ans": 147.8,
                "forces": "Fiscalit√© 10%, co√ªts SG&A bas",
                "risques": "Isolement total, pas d'√©cosyst√®me"
            }
        ]
        return cities_data
    
    def extract_financial_data(self):
        """Extrait les donn√©es financi√®res consolid√©es"""
        return {
            "volumes": {
                "an1": {"forward": 6490, "futures": 0, "total": 6490},
                "an2": {"forward": 9735, "futures": 3250, "total": 12985}, 
                "an3": {"forward": 14470, "futures": 7150, "total": 21620}
            },
            "ca": {
                "an1": 54.18, "an2": 132.57, "an3": 227.58
            },
            "marge_trading": {
                "an1": 1.78, "an2": 4.25, "an3": 11.31
            },
            "sga_costs": {
                "an1": 1.38, "an2": 1.34, "an3": 1.71
            },
            "ebitda": {
                "an1": 0.40, "an2": 2.91, "an3": 9.60
            }
        }
    
    def extract_risk_data(self):
        """Extrait les donn√©es de risques"""
        return [
            {
                "categorie": "Volatilit√© March√©",
                "impact": 5, "probabilite": 5, "criticite": 25,
                "mitigation": "Hedging minimum 80%, limites VAR strictes"
            },
            {
                "categorie": "Financier/Liquidit√©", 
                "impact": 5, "probabilite": 4, "criticite": 20,
                "mitigation": "Capital buffer 150%, lignes cr√©dit multi-banques"
            },
            {
                "categorie": "Expertise/Erreur Humaine",
                "impact": 4, "probabilite": 3, "criticite": 12,
                "mitigation": "Double validation trades, formation continue"
            },
            {
                "categorie": "R√©glementaire/Compliance",
                "impact": 4, "probabilite": 3, "criticite": 12, 
                "mitigation": "Compliance officer d√©di√©, audit mensuel"
            }
        ]

class NeskaoPDFReport:
    """G√©n√©rateur de rapport PDF pour Neskao"""
    
    def __init__(self, data):
        self.data = data
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
        self.story = []
        
    def setup_custom_styles(self):
        """Configure les styles personnalis√©s"""
        # Style titre principal
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1f2937')
        ))
        
        # Style sous-titre
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle', 
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#374151')
        ))
        
        # Style heading section
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading1'],
            fontSize=14,
            spaceBefore=20,
            spaceAfter=12,
            textColor=colors.HexColor('#1f2937'),
            borderWidth=1,
            borderColor=colors.HexColor('#e5e7eb'),
            borderPadding=5
        ))
        
        # Style texte normal am√©lior√©
        self.styles.add(ParagraphStyle(
            name='CustomNormal',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            alignment=TA_JUSTIFY
        ))
        
    def add_cover_page(self):
        """Ajoute la page de couverture"""
        # Logo et titre principal
        title = Paragraph("NESKAO TRADE DESK", self.styles['CustomTitle'])
        self.story.append(title)
        self.story.append(Spacer(1, 0.3*inch))
        
        subtitle = Paragraph("√âTUDE DE FAISABILIT√â<br/>Bureau de Trading International", self.styles['CustomSubtitle'])
        self.story.append(subtitle)
        self.story.append(Spacer(1, 0.5*inch))
        
        # Informations projet
        project_info = [
            ["Client:", "NESKAO"],
            ["Projet:", "Analyse Comparative de Localisation"],
            ["Date:", datetime.now().strftime("%d/%m/%Y")],
            ["Version:", "v1.0"],
            ["Consultant:", "MEREYA"]
        ]
        
        project_table = Table(project_info, colWidths=[2*inch, 3*inch])
        project_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        self.story.append(project_table)
        self.story.append(PageBreak())
        
    def add_executive_summary(self):
        """Ajoute le r√©sum√© ex√©cutif"""
        self.story.append(Paragraph("R√âSUM√â EX√âCUTIF", self.styles['SectionHeader']))
        
        summary_text = """
        <b>RECOMMANDATION PRINCIPALE : PARIS üá´üá∑</b><br/><br/>
        
        Cette √©tude pr√©sente une analyse exhaustive de 12 localisations potentielles pour l'√©tablissement 
        du bureau de trading international de Neskao. L'analyse multicrit√®res √©value chaque localisation 
        selon 5 dimensions cl√©s : r√©glementation (15%), impact social (30%), ROI (15%), 
        financement DFI (10%) et cash management (30%).<br/><br/>
        
        Avec un score pond√©r√© de <b>8.09/10</b>, Paris repr√©sente le choix optimal gr√¢ce √† :<br/>
        ‚Ä¢ Liens historiques privil√©gi√©s avec la C√¥te d'Ivoire<br/>
        ‚Ä¢ Acc√®s optimis√© aux financements de d√©veloppement (AFD/Proparco)<br/>
        ‚Ä¢ Impact social maximum (150K diaspora ivoirienne)<br/>
        ‚Ä¢ EBITDA positif d√®s l'An 1 (+0.52M‚Ç¨)<br/>
        ‚Ä¢ Convention fiscale √©liminant le risque de double imposition<br/><br/>
        
        <b>INVESTISSEMENT REQUIS :</b> 1.89M‚Ç¨ de capital initial<br/>
        <b>RENTABILIT√â :</b> ROI 3 ans de 171.6%, payback 2.3 ans<br/>
        <b>IMPACT :</b> 50+ emplois qualifi√©s, formation jeunes Ivoiriens
        """
        
        self.story.append(Paragraph(summary_text, self.styles['CustomNormal']))
        self.story.append(PageBreak())
        
    def add_cities_comparison(self):
        """Ajoute le tableau comparatif des villes"""
        self.story.append(Paragraph("ANALYSE COMPARATIVE DES 12 LOCALISATIONS", self.styles['SectionHeader']))
        
        cities = self.data['cities']
        
        # En-t√™tes du tableau
        table_data = [
            ['Rang', 'Ville', 'Score', 'Statut', 'EBITDA An1', 'Equity An1', 'ROI 3ans', 'Forces Principales']
        ]
        
        # Donn√©es des villes
        for i, city in enumerate(cities):
            table_data.append([
                str(i+1),
                f"{city['flag']} {city['nom']}",
                f"{city['score']:.2f}/10",
                city['statut'],
                f"{city['ebitda_an1']:+.2f}M‚Ç¨",
                f"{city['equity_an1']:.2f}M‚Ç¨", 
                f"{city['roi_3ans']:.1f}%",
                city['forces'][:40] + "..." if len(city['forces']) > 40 else city['forces']
            ])
        
        # Cr√©ation du tableau
        cities_table = Table(table_data, colWidths=[0.5*inch, 1.2*inch, 0.8*inch, 1*inch, 0.8*inch, 0.8*inch, 0.7*inch, 2*inch])
        
        # Style du tableau
        cities_table.setStyle(TableStyle([
            # En-t√™te
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            
            # Donn√©es
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f9fafb')]),
            
            # Bordures
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            
            # Couleurs selon statut
            ('TEXTCOLOR', (3, 1), (3, 3), colors.HexColor('#059669')),  # RECOMMAND√â
            ('TEXTCOLOR', (3, 4), (3, 9), colors.HexColor('#0284c7')),  # POSSIBLE
            ('TEXTCOLOR', (3, 10), (3, -1), colors.HexColor('#dc2626')), # D√âCONSEILL√â
        ]))
        
        self.story.append(cities_table)
        self.story.append(PageBreak())
        
    def add_financial_analysis(self):
        """Ajoute l'analyse financi√®re"""
        self.story.append(Paragraph("ANALYSE FINANCI√àRE - PROJECTIONS 3 ANS", self.styles['SectionHeader']))
        
        financial = self.data['financial']
        
        # Tableau des volumes
        vol_data = [
            ['Ann√©e', 'Forward (T)', 'Futures (T)', 'Total (T)', 'CA (M‚Ç¨)', 'Marge Trading (M‚Ç¨)', 'EBITDA (M‚Ç¨)']
        ]
        
        for year in ['an1', 'an2', 'an3']:
            year_num = year[-1]
            vol_data.append([
                f"An {year_num}",
                f"{financial['volumes'][year]['forward']:,}",
                f"{financial['volumes'][year]['futures']:,}",
                f"{financial['volumes'][year]['total']:,}",
                f"{financial['ca'][year]:.2f}",
                f"{financial['marge_trading'][year]:.2f}",
                f"{financial['ebitda'][year]:.2f}"
            ])
        
        financial_table = Table(vol_data, colWidths=[0.8*inch]*7)
        financial_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f9fafb')]),
        ]))
        
        self.story.append(financial_table)
        self.story.append(Spacer(1, 0.3*inch))
        
        # Analyse textuelle
        analysis_text = """
        <b>Points Cl√©s de l'Analyse Financi√®re :</b><br/><br/>
        
        ‚Ä¢ <b>Croissance Progressive :</b> Mont√©e en charge de 6,490T (An1) √† 21,620T (An3)<br/>
        ‚Ä¢ <b>Strat√©gie Hybride :</b> Introduction graduelle des futures √† partir de l'An2<br/>
        ‚Ä¢ <b>Rentabilit√© Op√©rationnelle :</b> EBITDA positif d√®s l'An1 pour Paris<br/>
        ‚Ä¢ <b>Scaling Efficace :</b> Marge trading passant de 1.78M‚Ç¨ √† 11.31M‚Ç¨<br/>
        ‚Ä¢ <b>Cash Flow Positif :</b> G√©n√©ration de liquidit√©s d√®s la 2√®me ann√©e
        """
        
        self.story.append(Paragraph(analysis_text, self.styles['CustomNormal']))
        self.story.append(PageBreak())
        
    def add_risk_analysis(self):
        """Ajoute l'analyse des risques"""
        self.story.append(Paragraph("MATRICE DES RISQUES", self.styles['SectionHeader']))
        
        risks = self.data['risks']
        
        # Tableau des risques
        risk_data = [
            ['Cat√©gorie', 'Impact', 'Probabilit√©', 'Criticit√©', 'Strat√©gies de Mitigation']
        ]
        
        for risk in risks:
            risk_data.append([
                risk['categorie'],
                f"{risk['impact']}/5",
                f"{risk['probabilite']}/5", 
                str(risk['criticite']),
                risk['mitigation']
            ])
        
        risk_table = Table(risk_data, colWidths=[2*inch, 0.8*inch, 0.8*inch, 0.8*inch, 2.8*inch])
        risk_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('ALIGN', (0, 1), (0, -1), 'LEFT'),
            ('ALIGN', (4, 1), (4, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f9fafb')]),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        self.story.append(risk_table)
        self.story.append(PageBreak())
        
    def add_recommendations(self):
        """Ajoute les recommandations finales"""
        self.story.append(Paragraph("RECOMMANDATIONS STRAT√âGIQUES", self.styles['SectionHeader']))
        
        recommendations_text = """
        <b>D√âCISION RECOMMAND√âE : PARIS</b><br/><br/>
        
        L'analyse exhaustive des 12 localisations confirme Paris comme choix optimal pour 
        l'√©tablissement du bureau de trading international de Neskao.<br/><br/>
        
        <b>FACTEURS D√âCISIFS :</b><br/>
        ‚úÖ Score consolid√© : 8.09/10 (1er/12)<br/>
        ‚úÖ Impact social maximum : 8.5/10 (liens CI, diaspora 150K)<br/>
        ‚úÖ Rentabilit√© imm√©diate : EBITDA +0.52M‚Ç¨ d√®s An1<br/>
        ‚úÖ Financement privil√©gi√© : AFD/Proparco (score 10/10)<br/>
        ‚úÖ Cadre r√©glementaire optimal : Convention fiscale CI<br/><br/>
        
        <b>PLAN DE D√âPLOIEMENT :</b><br/>
        ‚Ä¢ <b>Phase 1 (Ao√ªt 2024) :</b> Fondation l√©gale & r√©glementaire<br/>
        ‚Ä¢ <b>Phase 2 (Sept-Nov 2024) :</b> Structuration financi√®re & partenariats<br/>
        ‚Ä¢ <b>Phase 3 (Oct-D√©c 2024) :</b> D√©ploiement op√©rationnel<br/><br/>
        
        <b>INVESTISSEMENT & RETOUR :</b><br/>
        ‚Ä¢ Capital initial : 1.89M‚Ç¨<br/>
        ‚Ä¢ ROI 3 ans : 171.6%<br/>
        ‚Ä¢ Payback : 2.3 ans<br/>
        ‚Ä¢ R√©sultats nets cumul√©s : 5.14M‚Ç¨<br/><br/>
        
        Cette recommandation positionne Neskao comme acteur pionnier du trading cacao africain 
        sur les march√©s internationaux, maximisant l'impact √©conomique et social.
        """
        
        self.story.append(Paragraph(recommendations_text, self.styles['CustomNormal']))
        
    def generate_report(self, output_path):
        """G√©n√®re le rapport PDF complet"""
        print(f"üìù G√©n√©ration du rapport PDF : {output_path}")
        
        # Configuration du document
        doc = SimpleDocTemplate(
            str(output_path),
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Construction du contenu
        self.add_cover_page()
        self.add_executive_summary()
        self.add_cities_comparison()
        self.add_financial_analysis()
        self.add_risk_analysis()
        self.add_recommendations()
        
        # G√©n√©ration du PDF
        doc.build(self.story)
        print(f"‚úÖ Rapport PDF g√©n√©r√© avec succ√®s : {output_path}")

def main():
    """Fonction principale"""
    print("üöÄ G√©n√©ration du rapport PDF Neskao Trade Desk...")
    
    # Configuration
    webapp_dir = Path(__file__).parent
    timestamp = datetime.now().strftime("%d.%m.%y")
    output_path = webapp_dir / "reports" / f"NESKAO_TradeDesk_Rapport_Complet_{timestamp}_v1.pdf"
    
    # Extraction des donn√©es
    extractor = NeskaoDataExtractor(webapp_dir)
    data = {
        'cities': extractor.extract_cities_data(),
        'financial': extractor.extract_financial_data(),
        'risks': extractor.extract_risk_data()
    }
    
    print(f"üìä Donn√©es extraites : {len(data['cities'])} villes, {len(data['risks'])} risques")
    
    # G√©n√©ration du rapport
    generator = NeskaoPDFReport(data)
    output_path.parent.mkdir(exist_ok=True)
    generator.generate_report(output_path)
    
    print("üéâ G√©n√©ration termin√©e avec succ√®s!")
    return output_path

if __name__ == "__main__":
    main()