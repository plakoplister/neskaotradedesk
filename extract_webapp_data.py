#!/usr/bin/env python3
"""
Script pour extraire toutes les donn√©es de la WebApp Neskao Trade Desk
et g√©n√©rer un rapport Word complet (.docx)
"""

import json
import re
from datetime import datetime
from pathlib import Path
import sys

# V√©rifier si python-docx est install√©
try:
    from docx import Document
    from docx.shared import Inches, Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    from docx.enum.style import WD_STYLE_TYPE
    from docx.oxml.shared import OxmlElement, qn
except ImportError:
    print("‚ö†Ô∏è  Module python-docx non trouv√©. Installation...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "python-docx"])
    from docx import Document
    from docx.shared import Inches, Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    from docx.enum.style import WD_STYLE_TYPE

class NeskaoDataExtractor:
    def __init__(self, webapp_dir):
        self.webapp_dir = Path(webapp_dir)
        self.sections_dir = self.webapp_dir / "src" / "components" / "sections"
        self.data = {}
        
    def extract_data_from_file(self, file_path):
        """Extrait les donn√©es structur√©es d'un fichier React/TypeScript"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Extraire les donn√©es des arrays et objets
            data_patterns = [
                r'const\s+(\w+)\s*=\s*\[(.*?)\];',
                r'const\s+(\w+)\s*=\s*\{(.*?)\};',
                r'(\w+Data)\s*=\s*\[(.*?)\];',
                r'(\w+Data)\s*=\s*\{(.*?)\};'
            ]
            
            extracted = {}
            for pattern in data_patterns:
                matches = re.finditer(pattern, content, re.DOTALL)
                for match in matches:
                    var_name = match.group(1)
                    var_content = match.group(2)
                    if len(var_content) > 50:  # Seulement les gros objets de donn√©es
                        extracted[var_name] = var_content[:500] + "..." if len(var_content) > 500 else var_content
            
            return extracted
        except Exception as e:
            print(f"Erreur lecture {file_path}: {e}")
            return {}
    
    def extract_all_data(self):
        """Extrait toutes les donn√©es de tous les composants"""
        print("üîç Extraction des donn√©es de la WebApp...")
        
        sections = [
            "Dashboard.tsx", "Contexte.tsx", "Reglementation.tsx", 
            "Produits.tsx", "Financement.tsx", "SGA.tsx", 
            "Rentabilite.tsx", "ImpactSocial.tsx", "AnalyseDecisionnelle.tsx",
            "Risques.tsx", "NextSteps.tsx"
        ]
        
        for section in sections:
            section_file = self.sections_dir / section
            if section_file.exists():
                section_name = section.replace('.tsx', '')
                self.data[section_name] = self.extract_data_from_file(section_file)
                print(f"  ‚úÖ {section_name}: {len(self.data[section_name])} objets extraits")
        
        # Extraire aussi les donn√©es des fichiers de donn√©es
        data_files = [
            "rentabilite-updateddatas.js",
            "financement-updateddatas.txt", 
            "impactsocial-updateddatas.txt"
        ]
        
        for data_file in data_files:
            data_path = self.webapp_dir / "reports" / "datas tsx" / data_file
            if data_path.exists():
                self.data[data_file] = self.extract_data_from_file(data_path)
        
        return self.data

class NeskaoReportGenerator:
    def __init__(self, data):
        self.data = data
        self.doc = Document()
        self.setup_styles()
        
    def setup_styles(self):
        """Configure les styles du document"""
        # Style titre principal
        title_style = self.doc.styles.add_style('CustomTitle', WD_STYLE_TYPE.PARAGRAPH)
        title_style.font.size = Pt(18)
        title_style.font.bold = True
        title_style.font.name = 'Calibri'
        
        # Style sous-titre
        subtitle_style = self.doc.styles.add_style('CustomSubtitle', WD_STYLE_TYPE.PARAGRAPH)
        subtitle_style.font.size = Pt(14)
        subtitle_style.font.bold = True
        subtitle_style.font.name = 'Calibri'
        
        # Style texte normal
        normal_style = self.doc.styles['Normal']
        normal_style.font.name = 'Calibri'
        normal_style.font.size = Pt(11)
    
    def add_header(self):
        """Ajoute l'en-t√™te du rapport"""
        # Page de garde
        title = self.doc.add_paragraph()
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = title.add_run("NESKAO TRADE DESK\n√âTUDE DE FAISABILIT√â")
        run.font.size = Pt(20)
        run.font.bold = True
        
        subtitle = self.doc.add_paragraph()
        subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = subtitle.add_run("Analyse Comparative de Localisation\nBureau de Trading International")
        run.font.size = Pt(14)
        
        date_p = self.doc.add_paragraph()
        date_p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = date_p.add_run(f"Rapport g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y')}")
        run.font.size = Pt(12)
        run.font.italic = True
        
        self.doc.add_page_break()
        
        # Table des mati√®res
        toc = self.doc.add_paragraph("TABLE DES MATI√àRES", style='CustomTitle')
        toc.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        sections_toc = [
            "1. CONTEXTE ET ENVIRONNEMENT",
            "2. M√âTHODOLOGIE D'ANALYSE", 
            "3. ANALYSE R√âGLEMENTAIRE",
            "4. MIX PRODUITS ET STRAT√âGIE",
            "5. STRUCTURE FINANCI√àRE",
            "6. ANALYSE SG&A",
            "7. RENTABILIT√â ET ROI",
            "8. IMPACT SOCIAL",
            "9. ANALYSE D√âCISIONNELLE",
            "10. GESTION DES RISQUES",
            "11. NEXT STEPS ET ROADMAP",
            "12. CONCLUSIONS ET RECOMMANDATIONS"
        ]
        
        for section in sections_toc:
            p = self.doc.add_paragraph(section)
            p.style = 'List Number'
        
        self.doc.add_page_break()
    
    def add_executive_summary(self):
        """Ajoute le r√©sum√© ex√©cutif"""
        self.doc.add_heading('R√âSUM√â EX√âCUTIF', level=1)
        
        summary_text = """
Cette √©tude pr√©sente une analyse exhaustive de 12 localisations potentielles pour l'√©tablissement 
du bureau de trading international de Neskao. L'analyse multicrit√®res √©value chaque localisation 
selon 5 dimensions cl√©s : r√©glementation (15%), impact social (30%), ROI (15%), 
financement DFI (10%) et cash management (30%).

RECOMMANDATION PRINCIPALE : PARIS üá´üá∑

Avec un score pond√©r√© de 8.09/10, Paris repr√©sente le choix optimal gr√¢ce √† :
‚Ä¢ Liens historiques privil√©gi√©s avec la C√¥te d'Ivoire
‚Ä¢ Acc√®s optimis√© aux financements de d√©veloppement (AFD/Proparco) 
‚Ä¢ Impact social maximum (150K diaspora ivoirienne)
‚Ä¢ EBITDA positif d√®s l'An 1 (+0.52M‚Ç¨)
‚Ä¢ Convention fiscale √©liminant le risque de double imposition

ALTERNATIVES CR√âDIBLES :
‚Ä¢ Gen√®ve (8.06/10) - Hub financier international, standards suisses
‚Ä¢ Amsterdam (7.98/10) - Port #1 cacao Europe, innovation ESG

INVESTISSEMENT REQUIS : 1.89M‚Ç¨ de capital initial
RENTABILIT√â : ROI 3 ans de 171.6%, payback 2.3 ans
IMPACT : 50+ emplois qualifi√©s, formation jeunes Ivoiriens
        """
        
        self.doc.add_paragraph(summary_text.strip())
        self.doc.add_page_break()
    
    def generate_section_dashboard(self):
        """G√©n√®re la section Dashboard"""
        self.doc.add_heading('1. CONTEXTE ET ENVIRONNEMENT', level=1)
        
        # Pr√©sentation de Neskao
        self.doc.add_heading('1.1 Neskao : Pionnier Africain de la Transformation du Cacao', level=2)
        
        context_text = """
Fond√©e en septembre 2013, Neskao est la premi√®re entreprise africaine √† transformer 
les f√®ves de cacao hors normes en produits semi-finis de qualit√©. Cette soci√©t√© familiale 
fond√©e par Jean Pierre Roux et dirig√©e par Sylvie Roux a d√©velopp√© un mod√®le d'affaires 
r√©volutionnaire qui valorise les d√©chets de la fili√®re cacao.

CHIFFRES CL√âS :
‚Ä¢ Cr√©ation : 2013 (1√®re en Afrique)
‚Ä¢ Emplois : 150+ directs, 8000 indirects  
‚Ä¢ Capacit√© : 32K tonnes/an
‚Ä¢ Certification : FSSC 22000 V.5 (2021)

CAPACIT√âS ACTUELLES :
‚Ä¢ P√¢te de cacao : 12 000 tonnes/an
‚Ä¢ Beurre de cacao : 5 000 tonnes/an  
‚Ä¢ Tourteau de cacao : 15 000 tonnes/an
‚Ä¢ Localisation : Zone industrielle de Vridi, Abidjan
        """
        
        self.doc.add_paragraph(context_text.strip())
        
        # Environnement international
        self.doc.add_heading('1.2 Environnement International du Cacao', level=2)
        
        market_text = """
CHIFFRES MONDIAUX :
‚Ä¢ Production mondiale : 4.5M tonnes/an
‚Ä¢ Production C√¥te d'Ivoire : 2.0M tonnes/an (45%)
‚Ä¢ Capacit√© transformation : 980K tonnes install√©e
‚Ä¢ Horizon 2029 : 1.9M tonnes capacit√©

TENDANCES MAJEURES :
üìà Volatilit√© accrue des prix n√©cessitant des outils sophistiqu√©s (forwards/futures)
üå± R√©glementation EUDR cr√©ant des opportunit√©s pour les acteurs conformes
üíπ Financiarisation du march√© via ICE Futures
ü§ù Consolidation des traders, fen√™tre d'opportunit√© pour nouveaux entrants africains
        """
        
        self.doc.add_paragraph(market_text.strip())
    
    def generate_section_methodology(self):
        """G√©n√®re la section m√©thodologie"""
        self.doc.add_heading('2. M√âTHODOLOGIE D\'ANALYSE', level=1)
        
        methodology_text = """
L'analyse comparative des 12 localisations s'appuie sur une approche multicrit√®res pond√©r√©e :

CRIT√àRES D'√âVALUATION :
‚Ä¢ R√©glementation (15%) : Cadre l√©gal, conventions fiscales, restrictions
‚Ä¢ Impact Social (30%) : Liens avec CI, diaspora, programmes formation
‚Ä¢ ROI (15%) : Rentabilit√© op√©rationnelle, payback, IRR
‚Ä¢ Financement DFI (10%) : Acc√®s institutions d√©veloppement, conditions
‚Ä¢ Cash Management (30%) : Besoins liquidit√©, co√ªts financement

LOCALISATIONS √âVALU√âES :
1. Paris üá´üá∑ - Score : 8.09/10
2. Gen√®ve üá®üá≠ - Score : 8.06/10  
3. Amsterdam üá≥üá± - Score : 7.98/10
4. Singapour üá∏üá¨ - Score : 7.49/10
5. Hambourg üá©üá™ - Score : 7.32/10
6. Londres üá¨üáß - Score : 7.06/10
7. Chypre üá®üáæ - Score : 7.14/10
8. Maroc CFC üá≤üá¶ - Score : 6.91/10
9. Maurice üá≤üá∫ - Score : 6.56/10
10. Tel Aviv üáÆüá± - Score : 6.58/10
11. Dubai üá¶üá™ - Score : 6.50/10
12. Andorre üá¶üá© - Score : 5.23/10

DONN√âES SOURCES :
‚Ä¢ R√©glementations nationales et conventions fiscales
‚Ä¢ Donn√©es ICE Futures et march√©s d√©riv√©s cacao
‚Ä¢ Analyses AFD, Proparco, IFC sur financements d√©veloppement
‚Ä¢ √âtudes d'impact social et diaspora
‚Ä¢ Projections financi√®res 3 ans (2024-2026)
        """
        
        self.doc.add_paragraph(methodology_text.strip())
    
    def generate_all_sections(self):
        """G√©n√®re toutes les sections du rapport"""
        print("üìù G√©n√©ration du rapport Word...")
        
        # En-t√™te et r√©sum√©
        self.add_header()
        self.add_executive_summary()
        
        # Sections principales
        self.generate_section_dashboard()
        self.generate_section_methodology()
        
        # TODO: Ajouter les autres sections avec les vraies donn√©es extraites
        sections_to_add = [
            ("3. ANALYSE R√âGLEMENTAIRE", "Reglementation"),
            ("4. MIX PRODUITS ET STRAT√âGIE", "Produits"), 
            ("5. STRUCTURE FINANCI√àRE", "Financement"),
            ("6. ANALYSE SG&A", "SGA"),
            ("7. RENTABILIT√â ET ROI", "Rentabilite"),
            ("8. IMPACT SOCIAL", "ImpactSocial"),
            ("9. ANALYSE D√âCISIONNELLE", "AnalyseDecisionnelle"),
            ("10. GESTION DES RISQUES", "Risques"),
            ("11. NEXT STEPS ET ROADMAP", "NextSteps")
        ]
        
        for title, section_key in sections_to_add:
            self.doc.add_heading(title, level=1)
            
            if section_key in self.data:
                section_data = self.data[section_key]
                self.doc.add_paragraph(f"[Section {section_key} - Donn√©es extraites : {len(section_data)} objets]")
                
                # Ajouter un √©chantillon des donn√©es
                for key, value in list(section_data.items())[:3]:
                    p = self.doc.add_paragraph()
                    p.add_run(f"{key}: ").bold = True
                    p.add_run(str(value)[:200] + "..." if len(str(value)) > 200 else str(value))
            else:
                self.doc.add_paragraph("[Donn√©es en cours d'extraction...]")
            
            self.doc.add_page_break()
        
        # Conclusions
        self.doc.add_heading('12. CONCLUSIONS ET RECOMMANDATIONS', level=1)
        
        conclusion_text = """
D√âCISION STRAT√âGIQUE RECOMMAND√âE : PARIS

L'analyse exhaustive des 12 localisations confirme Paris comme choix optimal pour 
l'√©tablissement du bureau de trading international de Neskao.

FACTEURS D√âCISIFS :
‚úÖ Score consolid√© : 8.09/10 (1er/12)
‚úÖ Impact social maximum : 8.5/10 (liens CI, diaspora 150K)
‚úÖ Rentabilit√© imm√©diate : EBITDA +0.52M‚Ç¨ d√®s An1
‚úÖ Financement privil√©gi√© : AFD/Proparco (score 10/10)
‚úÖ Cadre r√©glementaire optimal : Convention fiscale CI

PLAN DE D√âPLOIEMENT :
Phase 1 (Ao√ªt 2024) : Fondation l√©gale & r√©glementaire
Phase 2 (Sept-Nov 2024) : Structuration financi√®re & partenariats  
Phase 3 (Oct-D√©c 2024) : D√©ploiement op√©rationnel

INVESTISSEMENT & RETOUR :
‚Ä¢ Capital initial : 1.89M‚Ç¨
‚Ä¢ ROI 3 ans : 171.6%
‚Ä¢ Payback : 2.3 ans
‚Ä¢ R√©sultats nets cumul√©s : 5.14M‚Ç¨

Cette recommandation positionne Neskao comme acteur pionnier du trading cacao africain 
sur les march√©s internationaux, maximisant l'impact √©conomique et social.
        """
        
        self.doc.add_paragraph(conclusion_text.strip())
    
    def save_report(self, output_path):
        """Sauvegarde le rapport"""
        print(f"üíæ Sauvegarde du rapport : {output_path}")
        self.doc.save(output_path)
        print(f"‚úÖ Rapport g√©n√©r√© avec succ√®s : {output_path}")

def main():
    # Configuration
    webapp_dir = Path(__file__).parent
    timestamp = datetime.now().strftime("%d.%m.%y")
    output_path = webapp_dir / "reports" / f"NESKAO_TradeDesk_Rapport_Faisabilite_{timestamp}_v1.docx"
    
    print("üöÄ G√©n√©ration du rapport Neskao Trade Desk...")
    print(f"üìÇ R√©pertoire WebApp : {webapp_dir}")
    print(f"üìÑ Fichier de sortie : {output_path}")
    
    # Extraction des donn√©es
    extractor = NeskaoDataExtractor(webapp_dir)
    data = extractor.extract_all_data()
    
    print(f"üìä Donn√©es extraites : {sum(len(v) for v in data.values())} objets total")
    
    # G√©n√©ration du rapport
    generator = NeskaoReportGenerator(data)
    generator.generate_all_sections()
    
    # Sauvegarde
    output_path.parent.mkdir(exist_ok=True)
    generator.save_report(output_path)
    
    print("üéâ G√©n√©ration termin√©e avec succ√®s!")
    return output_path

if __name__ == "__main__":
    main()